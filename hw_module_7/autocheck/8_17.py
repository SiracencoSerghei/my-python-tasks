"""Підсумкове завдання модуля два було на обчислення арифметичного виразу. У задачі на повторення ми підемо трохи іншим шляхом і виконаємо схоже завдання, одночасно закріпивши знання роботи зі рядками та списками. Розбиття рядка на лексеми є процес перетворення вихідного рядка в список з підрядків, званих лексемами (token).

В арифметичному виразі лексемами є: оператори, числа та дужки. Операторами у нас будуть такі символи: *, /, - та +. Оператори та дужки легко виділити у рядку — вони складаються з одного символу і ніколи не є частиною інших лексем. Числа виділити складніше, оскільки ці лексеми можуть складатися з кількох символів. Тому будь-яка безперервна послідовність цифр — це одна числова лексема.

Напишіть функцію, яка приймає параметр рядок, що містить математичний вираз, і перетворює його в список лексем. Кожна лексема має бути або оператором, або числом, або дужкою.

Приклад:

"2+ 34-5 * 3" => ['2', '+', '34', '-', '5', '*', '3']
З метою спрощення вважаємо, що числа можуть бути тільки цілими, і вхідний рядок завжди міститиме математичний вираз, що складається з дужок, чисел та операторів.

Зверніть увагу, що лексеми можуть відокремлюватися один від одного різною кількістю прогалин, а можуть і не відокремлюватися зовсім. Прогалини не є лексемами та до підсумкового списку потрапити не повинні."""

import re


# def token_parser(s):
#     pattern = r'(\d+|\+|\-|\*|\/|\(|\))'
#     lexemes = re.findall(pattern, s)
#     return lexemes

def token_parser(s):
    # for result
    lexemes = []
    # for state
    current_lexeme = ""

    for char in s:
        if char.isdigit():
            current_lexeme += char
        elif char in "+-*/()":
            if current_lexeme:
                lexemes.append(current_lexeme)
                current_lexeme = ""
            lexemes.append(char)
        elif char.isspace():
            if current_lexeme:
                lexemes.append(current_lexeme)
                current_lexeme = ""

    if current_lexeme:
        lexemes.append(current_lexeme)

    return lexemes

# Приклад використання:
s = "2+ 34 -5 * 3"
tokens = token_parser(s)
print(tokens)